//////////////////////////////
/////////////LAB8////////////
/////////////////////////////
void Lab8() {

	Mat frame, crnt;
	Mat prev;
	Mat dst;
	Mat flow;
	char folderName[MAX_PATH];
	char fname[MAX_PATH];
	if (openFolderDlg(folderName) == 0)
		return;
	FileGetter fg(folderName, "bmp");
	int frameNum = -1;
	makeColorwheel();
	make_HSI2RGB_LUT();
	while (fg.getNextAbsFile(fname))
	{
		crnt = imread(fname, CV_LOAD_IMAGE_GRAYSCALE);
		double t = (double)getTickCount();
		GaussianBlur(crnt, crnt, Size(5, 5), 0.8, 0.8);
		++frameNum;

		if (frameNum > 0)
		{
			double t = (double)getTickCount(); 

			int winSize = 11;
			calcOpticalFlowFarneback(prev, crnt, flow, 0.5, 3, winSize, 10, 6, 1.5, 0);

			t = ((double)getTickCount() - t) / getTickFrequency();
			printf("%d - %.3f [ms]\n", frameNum, t * 1000);

			showFlowDense("rez", crnt, flow, 0.5, 1);
			int* hist_dir;
			hist_dir = new int[360]{ 0 };

			for (int i = 0; i < crnt.rows; i++) {
				for (int j = 0; j < crnt.cols; j++) {
					Point2f f = flow.at<Point2f>(i, j);
					float dir_rad = CV_PI + atan2(-f.y, -f.x);
					int dir_deg = (dir_rad * 180) / CV_PI;
					float mag = sqrt(pow(f.x, 2) + pow(f.y, 2));
					if (dir_deg >= 0 && dir_deg < 360) {
						if (mag >= 0.5)
							hist_dir[dir_deg]++;
					}
				}
			}
			showHistogramDir("hist", hist_dir, 360, 200, true);

		}
		prev = crnt.clone();

		int c = cvWaitKey(0);
		if (c == 27) {
			printf("ESC pressed - playback finished\n\n");
		}
	}
}
