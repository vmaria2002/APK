package com.example.myapplication;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {
    Button btnConnection, btnLed1;
    private static final int SOLICIT_ACTIVATION = 1;
    private static final int SOLICIT_CONEXION = 2;
    private static final int MESSAGE_READ = 3;
    private static String MAC = null;
    boolean conexion = false;
    private static final int REQUEST_BLUETOOTH_CONNECT_PERMISSION = 1;
    // Verificarea conexiunii Bluetooth:
    BluetoothAdapter myBluetoothAdapter = null;
    BluetoothDevice myDevices = null;
    BluetoothSocket mySocket = null;

    UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    ConnectedThread connectedThread;
    Handler mHandler;
    StringBuilder dataBluetooth = new StringBuilder();


    @SuppressLint("HandlerLeak")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        //***************** next page ***********************************
        configurationNextPage();



        //***************** logica pentru Bluetooth: **********************

        btnConnection = (Button) findViewById(R.id.btnConnection);
        btnLed1 = (Button) findViewById(R.id.btnLed1);


        myBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if (myBluetoothAdapter == null) {
            //Pop-up message
            //Toast.makeText(): creeaza un pop-up cu un mesaj
            //Toast.LENGTH_LONG: afisare mesaj pe o perioada mai mare de timp
            // .show(): afisare mesaj pe ecran
            Toast.makeText(getApplicationContext(), "Bluetooth conecton fail", Toast.LENGTH_LONG).show();
        } else if (!myBluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                // TODO: Consider calling
                //    ActivityCompat#requestPermissions
                ActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.BLUETOOTH_CONNECT}, REQUEST_BLUETOOTH_CONNECT_PERMISSION);

                // here to request the missing permissions, and then overriding
                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                //                                          int[] grantResults)
                // to handle the case where the user grants the permission. See the documentation
                // for ActivityCompat#requestPermissions for more details.
                return;
            }
            startActivity(enableBtIntent);

        }
        btnConnection.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (conexion) {
                    // deconectare
                    try {
                        mySocket.close();
                        conexion = false;
                        btnConnection.setText("connected");

                        Toast.makeText(getApplicationContext(), "bluetooth disconnected", Toast.LENGTH_LONG).show();


                    } catch (IOException error) {
                        Toast.makeText(getApplicationContext(), "Error: " + error, Toast.LENGTH_LONG).show();

                    }
                } else {
                    //conectare
                    Intent openList = new Intent(MainActivity.this, ListOfDevices.class);
                    startActivity(openList);
                }

            }
        });
        btnLed1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if(conexion){
                    connectedThread.write("led1");
                }else {
                    Toast.makeText(getApplicationContext(), "Bluetooth not connected: " , Toast.LENGTH_LONG).show();

                }
            }
        });
mHandler = new Handler() {
     @Override
    public void handleMessage(Message msg) {
        if(msg.what == MESSAGE_READ){

            String data = (String)  msg.obj;
             dataBluetooth.append(data);

             int final_data = dataBluetooth.indexOf("}");

             if(final_data>0){
                 String complete_data = dataBluetooth.substring(0, final_data);
                 int info = dataBluetooth.length();

                 if(dataBluetooth.charAt(0)=='{'){

                     //{LED1-on} {LED1-off}
                     String date_end = dataBluetooth.substring(1, info);
                     if(date_end.contains("LED1-on")){
                         btnLed1.setText("LED1- aprins");
                     }else if(date_end.contains("LED1-off")){
                         btnLed1.setText("LED1- stins");
                     }else{
                       Log.d("LED1", "stins/aprins");
                     }
                 }
            dataBluetooth.delete(0, dataBluetooth.length());
             }
        }

    }
};

    }


    // *********************** logica next button: *************************

    private void configurationNextPage(){
        // Din butonul de next, mergi mai departe:
        Button nextButton = (Button) findViewById(R.id.next);
        nextButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Din pagina curenta- MainActivity
                // Se navigheaza catre clasa ResetContinue.java
                startActivity(new Intent(MainActivity.this, ResetContinue.class ));
            }
        });

    }

    // ********************* logica bluetooth connection *********************
    @Override
    //gestioneaza raspuncurile
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        //Propria logica
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case SOLICIT_ACTIVATION:
                if (resultCode == Activity.RESULT_OK) {
                    Toast.makeText(getApplicationContext(), "Bluetooth connected", Toast.LENGTH_LONG).show();
                } else {
                    Toast.makeText(getApplicationContext(), "Bluetooth CANNOT be connected. Application will be closed", Toast.LENGTH_LONG).show();
                    //close app:
                    finish();
                }
                break;
F
            case SOLICIT_CONEXION:
                if (resultCode == Activity.RESULT_OK) {
                    MAC = data.getExtras().getString(ListOfDevices.MAC_Address);
                    // Toast.makeText(getApplicationContext(), "MAC address "+ MAC, Toast.LENGTH_LONG).show();
                    myDevices = myBluetoothAdapter.getRemoteDevice(MAC);
                    try {
                        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                            // TODO: Consider calling
                            //    ActivityCompat#requestPermissions
                            // here to request the missing permissions, and then overriding
                            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                            //                                          int[] grantResults)
                            // to handle the case where the user grants the permission. See the documentation
                            // for ActivityCompat#requestPermissions for more details.
                            return;
                        }
                        mySocket = myDevices.createInsecureRfcommSocketToServiceRecord(MY_UUID);
                        mySocket.connect();

                        conexion = true;

                        connectedThread = new ConnectedThread(mySocket);
                        connectedThread.start();


                        btnConnection.setText("Disconnected");

                        Toast.makeText(getApplicationContext(), "MAC address- connected: "+MAC, Toast.LENGTH_LONG).show();

                    }catch (IOException error){
                        conexion = false;
                        Toast.makeText(getApplicationContext(), "MAC address- error: "+MAC, Toast.LENGTH_LONG).show();
                    }
               }else{
                   Toast.makeText(getApplicationContext(), "MAC address- successes", Toast.LENGTH_LONG).show();
               }
        }
    }

    private class ConnectedThread extends Thread {
        InputStream inputStream=null;
        OutputStream outputStream =null;
        int avilableBytes=0;

        public ConnectedThread(BluetoothSocket socket){
            InputStream tempIn = null;
            OutputStream tempOut = null;
            try{
                tempIn = socket.getInputStream();
                tempOut = socket.getOutputStream();
            }catch (IOException e){
                e.printStackTrace();
            }
            inputStream=tempIn;
            outputStream=tempOut;
        }

        public void run() {
            byte [] buffer = new byte[1024];
            int bytes;

            while(true){
                try{
                    //read from input stream
                    bytes = inputStream.read(buffer);

                    String dataBt = new String(buffer, 0, bytes);

                    //trimiterea datelor din UI!
                    mHandler.obtainMessage(MESSAGE_READ, bytes, -1, dataBt).sendToTarget();


                }catch (IOException e){
                    break;
                }
            }


        }
        public void write(String value){
            byte[] buffer = value.getBytes();

            try{
                outputStream.write(buffer);
            }catch (IOException e){

            }
        }
    }

}
}